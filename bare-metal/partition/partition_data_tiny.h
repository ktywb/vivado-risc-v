// Generated data arrays
// Byte order preserved per line from original .mem files (Big-Endian)
#include <stddef.h>
#include <stdint.h>

#define ALIGNMENT 64

// Data from ../data/cache_line.mem, byte order preserved per line (Big-Endian)
uint8_t cache_line_data[] __attribute__((aligned(64))) = {
  0x41, 0xFB, 0xAD, 0x65, 0xFE, 0x06, 0xEE, 0x79, 0xDD, 0x26, 0xAD, 0x66, 0xC4, 0xB6, 0x09, 0x95, 
  0x38, 0x96, 0x89, 0x65, 0x6A, 0x69, 0xBA, 0x9D, 0x2C, 0x28, 0x1E, 0xE1, 0xD4, 0xFF, 0xF9, 0x7A, 
  0x5B, 0xFC, 0x81, 0xA5, 0x38, 0x9D, 0x68, 0xD6, 0x91, 0x86, 0x9F, 0x80, 0x2E, 0x31, 0x09, 0xB9, 
  0xAE, 0x5B, 0x58, 0x32, 0xE3, 0xB1, 0xC6, 0xE8, 0xD3, 0x21, 0x13, 0x56, 0x46, 0xCA, 0x55, 0x98, 
  0xA3, 0x75, 0xEE, 0xCE, 0xB7, 0x25, 0x59, 0xEE, 0x6A, 0xF7, 0x3E, 0x2A, 0xD9, 0x0E, 0x68, 0xB4, 
  0xB7, 0x35, 0xBE, 0x7E, 0x29, 0x42, 0x1C, 0x76, 0x41, 0x52, 0xE8, 0xF7, 0x16, 0xE5, 0xB5, 0x9C, 
  0xC0, 0x0F, 0xD4, 0x60, 0x63, 0xAA, 0x41, 0x76, 0x0C, 0x04, 0x8A, 0x28, 0xBD, 0xC3, 0x28, 0x80, 
  0x0B, 0xBC, 0xAC, 0xC4, 0x5D, 0x64, 0x9B, 0x40, 0xC3, 0x4F, 0x1F, 0x33, 0xB1, 0xF9, 0x5E, 0x23, 
  0x5F, 0xD8, 0xEF, 0x97, 0x53, 0xBB, 0xB1, 0x71, 0xB4, 0x4E, 0x1F, 0x0C, 0x11, 0x41, 0x0C, 0x83, 
  0x5F, 0xF0, 0xD7, 0xA7, 0xC5, 0xAD, 0xCF, 0xC4, 0xAB, 0xE3, 0x97, 0x61, 0xA4, 0xE1, 0x25, 0xD9, 
  0x70, 0x72, 0x6A, 0x74, 0xD3, 0x73, 0x1A, 0xA3, 0x18, 0x27, 0xEF, 0xEA, 0xA5, 0xC5, 0x9B, 0x99, 
  0x71, 0x61, 0xED, 0x21, 0xAD, 0xFE, 0x2A, 0xE7, 0xCB, 0x9A, 0x67, 0xCC, 0x05, 0xDC, 0x1B, 0x92, 
  0xF8, 0x1D, 0xEB, 0xD2, 0x06, 0x21, 0xC0, 0xDE, 0x7E, 0x67, 0x8A, 0x0C, 0xB5, 0xC4, 0xEA, 0xBF, 
  0xFC, 0x15, 0xF7, 0x95, 0xB6, 0x3E, 0x1F, 0xD2, 0x8A, 0x60, 0x74, 0x7D, 0x88, 0x5B, 0x6F, 0x07, 
  0xF3, 0xAC, 0xC3, 0xFB, 0x02, 0x39, 0xA8, 0x0A, 0x00, 0x95, 0x07, 0xBF, 0x6A, 0xFB, 0x7E, 0xC6, 
  0x12, 0x35, 0x5E, 0x5D, 0x9D, 0x94, 0xBF, 0x97, 0xAC, 0x6F, 0x1B, 0x86, 0x44, 0x53, 0x6E, 0xF3, 
  0x1E, 0x8E, 0x93, 0x2A, 0x76, 0x7E, 0x5D, 0x92, 0x00, 0xE6, 0x9A, 0x0C, 0x10, 0xEE, 0xE3, 0x70, 
  0xD4, 0x55, 0xA5, 0x41, 0x26, 0xFC, 0x73, 0x9E, 0x0D, 0xBE, 0x7A, 0xB8, 0xDD, 0x36, 0x16, 0xBB, 
  0x17, 0x33, 0x5E, 0x4E, 0x54, 0x8A, 0x71, 0x46, 0xC6, 0xDC, 0x1C, 0xDC, 0x58, 0x23, 0x96, 0xFE, 
  0xAB, 0xA9, 0x33, 0x7D, 0xB3, 0xCE, 0xD4, 0x1C, 0x07, 0x9A, 0x84, 0xDF, 0x62, 0x12, 0x76, 0x3A, 
  0x68, 0x7D, 0x89, 0x65, 0x43, 0x54, 0x7C, 0xA8, 0x45, 0xEF, 0x95, 0x00, 0x84, 0x59, 0xD2, 0x38, 
  0x0B, 0xAD, 0x5C, 0x7D, 0x13, 0x13, 0xCE, 0xB3, 0x4A, 0x9E, 0xCE, 0x6D, 0x14, 0x45, 0x5D, 0x7D, 
  0xCA, 0x01, 0xAB, 0xA2, 0xD4, 0x90, 0x1B, 0x16, 0x35, 0x2F, 0x1B, 0xC6, 0x95, 0xCD, 0xD8, 0xB8, 
  0x5E, 0xF2, 0x2B, 0x53, 0x09, 0x2F, 0xFE, 0xF2, 0x28, 0x95, 0xCE, 0x55, 0xE2, 0xAA, 0x65, 0x1F, 
  0x85, 0x88, 0xE8, 0xFA, 0x79, 0x93, 0x5C, 0x20, 0xC9, 0x8A, 0xE3, 0x0B, 0x0C, 0x60, 0xC7, 0x54, 
  0xAA, 0xFA, 0x45, 0x4F, 0x5E, 0xD4, 0xA4, 0x28, 0xA1, 0xA8, 0x61, 0x4E, 0x2B, 0x88, 0x43, 0xBF, 
  0xFE, 0xC7, 0x47, 0x6D, 0x94, 0x11, 0xA4, 0xC0, 0xB1, 0x69, 0x55, 0xE1, 0x9E, 0x79, 0x52, 0x74, 
  0x02, 0xEB, 0x1C, 0xB4, 0xE6, 0x6F, 0xCC, 0x82, 0xD6, 0xA7, 0x17, 0x55, 0x84, 0x6F, 0x86, 0xFD, 
  0xA3, 0xD3, 0x01, 0x92, 0xC5, 0xEE, 0xB8, 0x6D, 0x85, 0x82, 0x4E, 0x58, 0xA8, 0x6B, 0x37, 0x8E, 
  0x5E, 0xD1, 0xC7, 0x57, 0x0F, 0xC5, 0x10, 0x93, 0x57, 0xCA, 0x68, 0x52, 0xF4, 0xF1, 0x4B, 0x34, 
  0xB5, 0x63, 0x1A, 0xCB, 0x8F, 0x81, 0xF4, 0xD5, 0xF1, 0x00, 0x9C, 0xE4, 0xC4, 0xE5, 0x9A, 0xD3, 
  0xE8, 0x71, 0x76, 0xC5, 0x92, 0x99, 0x79, 0xF2, 0xD1, 0x45, 0x57, 0xC1, 0xBD, 0xFA, 0xDA, 0x5F, 
  0xB4, 0x85, 0x27, 0x15, 0xA5, 0xB1, 0x54, 0x0C, 0xD5, 0x13, 0x5C, 0x2B, 0x7F, 0xBD, 0x70, 0x4C, 
  0xE9, 0xF1, 0xAB, 0x87, 0x07, 0xD8, 0x37, 0xFE, 0xC6, 0x17, 0x1C, 0x00, 0xFD, 0x27, 0x91, 0x51, 
  0xB2, 0x3C, 0xC6, 0xDC, 0x96, 0xF6, 0x27, 0x50, 0x02, 0x9E, 0xCD, 0x94, 0x9E, 0xDD, 0x9F, 0xD5, 
  0x1D, 0x5E, 0xF7, 0xA0, 0xFD, 0x24, 0x96, 0x0B, 0xE5, 0xED, 0xD0, 0x58, 0xE8, 0x39, 0xBF, 0xC9, 
  0x8F, 0x29, 0x3E, 0x50, 0x16, 0x20, 0x4A, 0x35, 0x0C, 0x5D, 0xDB, 0x3B, 0xBB, 0x2D, 0xD4, 0xDD, 
  0x96, 0xE2, 0x40, 0x23, 0x9E, 0xE1, 0xCC, 0x56, 0xE9, 0x21, 0x4A, 0xC9, 0x6B, 0xEC, 0xD7, 0xE1, 
  0xF9, 0x3F, 0x50, 0x0C, 0x9C, 0x48, 0x9D, 0x5D, 0xAE, 0x4C, 0x81, 0xAA, 0xB7, 0xED, 0x57, 0xC4, 
  0x7D, 0xF5, 0x31, 0x5B, 0x92, 0x51, 0x89, 0xEB, 0xC8, 0x74, 0x1C, 0xD7, 0xF7, 0x17, 0x72, 0x49, 
  0x50, 0xDB, 0x87, 0xEF, 0x90, 0x03, 0x33, 0xE6, 0xB3, 0x1A, 0x46, 0x92, 0x0A, 0xFC, 0x31, 0xC5, 
  0xE7, 0x82, 0xDB, 0xD5, 0x07, 0xDB, 0x0A, 0x3D, 0xFB, 0x92, 0x5E, 0xE0, 0x01, 0x04, 0x56, 0x67, 
  0xB1, 0xA8, 0xD3, 0xBF, 0xC2, 0xBC, 0xFC, 0x32, 0x30, 0xA5, 0xDD, 0x5F, 0xBE, 0xF9, 0x2C, 0xB1, 
  0xAF, 0x11, 0xCD, 0xCD, 0x38, 0x0D, 0x2B, 0x47, 0x71, 0x43, 0x53, 0x4F, 0x42, 0xEA, 0xF3, 0x6E, 
  0xC5, 0xC1, 0x32, 0xF5, 0x59, 0x6F, 0x79, 0x3B, 0x02, 0xA6, 0x2E, 0xB2, 0xEA, 0xBC, 0x1B, 0xA0, 
  0x59, 0xE7, 0x80, 0x85, 0x65, 0x67, 0xB5, 0x69, 0x75, 0x35, 0x9E, 0xAA, 0x8F, 0x08, 0x47, 0x1D, 
  0x23, 0xCA, 0xC5, 0x20, 0xF3, 0x55, 0x21, 0xCF, 0x23, 0xE2, 0x9D, 0xA7, 0x10, 0xFB, 0x37, 0xF8, 
  0x95, 0x35, 0xEB, 0x5F, 0x23, 0xF5, 0x2D, 0x5D, 0x24, 0x75, 0xC1, 0x21, 0xE2, 0x9B, 0xE7, 0xD0, 
  0x34, 0x19, 0x99, 0xDD, 0xEB, 0x06, 0x47, 0x3A, 0xE9, 0xE0, 0x6C, 0x1A, 0xE0, 0x2F, 0xE8, 0x92, 
  0xCF, 0x3D, 0x73, 0xB1, 0x83, 0xC5, 0x42, 0xE8, 0xE5, 0x02, 0xB2, 0x48, 0x2B, 0x8D, 0xBF, 0x68, 
};
size_t cache_line_data_size = sizeof(cache_line_data);

// Data from ../data/tuple_length.mem, byte order preserved per line (Big-Endian)
uint8_t tuple_length_data[] __attribute__((aligned(64))) = {
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 
};
size_t tuple_length_data_size = sizeof(tuple_length_data);

// Data from ../data/key.mem, byte order preserved per line (Big-Endian)
uint8_t key_info_data[] __attribute__((aligned(64))) = {
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 
};
size_t key_info_data_size = sizeof(key_info_data);//

